Unit 21 - Sentinel spatio-temporal
==================================

:ref:`Create a new mapset <create-mapset>` in *jena-region* location:
`sentinel_ndvi`.

.. important:: Do not use dashes in the mapset name otherwise
   :grasscmd:`t.rast.algebra` will most probably fail.

Download data
-------------

.. important:: Pre-downloaded Sentinel scenes are available in the
   sample dataset :file:`geodata/sentinel`. Readers can continue
   with :ref:`importing sample data <sentinel-import-st>`.

Let's download Sentinel L2A products for spring/summer
2021. There are 6 products available as shown below.

.. code-block:: bash
                
   i.sentinel.download -l settings=sentinel.txt map=jena_boundary area_relation=Contains \
   start=2021-04-01 end=2021-10-31 producttype=S2MSI2A clouds=10

::
   
   6 Sentinel product(s) found
   a844500a-049f-46a3-92de-bcda2c38fc3c ... 2021-05-31T10:15:59Z  2% S2MSI2A 1.09 GB
   d5b73db9-0acf-401d-9bf4-a6f199df1119 ... 2021-09-08T10:15:59Z  3% S2MSI2A 1.09 GB
   b00d5dfd-9cce-48c6-a011-fd46b85de814 ... 2021-09-03T10:20:21Z  3% S2MSI2A 1.09 GB
   44644895-f6f9-4963-ab47-b5e122d3bf41 ... 2021-08-14T10:20:31Z  5% S2MSI2A 1.10 GB
   dc92df2b-b69e-4081-88a6-bd4b95e4fc78 ... 2021-04-21T10:15:49Z  8% S2MSI2A 1.08 GB
   2c02ac80-60ae-4376-9099-2267ad3a96b5 ... 2021-04-26T10:20:21Z  9% S2MSI2A 1.09 GB

Download selected Sentinel scenes:

.. code-block:: bash
                
   i.sentinel.download settings=sentinel.txt map=jena_boundary area_relation=Contains \
   start=2021-04-01 end=2021-10-31 producttype=S2MSI2A clouds=10 \
   output=geodata/sentinel/2021

.. _sentinel-import-st:

Import data
-----------

Data can be imported by :grasscmd:`i.sentinel.import` similarly as
done in :doc:`20`. At fisrt check list of bands to be imported by
:param:`-p` flag. Since NDVI is computed only 4th and 8th band are
selected. Use :option:`register_output` in order to create timestamps
file. This file will be used for registering bands into space-time
raster dataset.

.. code-block:: bash

   i.sentinel.import -p input=geodata/sentinel/2019 pattern="B0[4|8]_10m"
   
   i.sentinel.import -l -c input=geodata/sentinel/2019 pattern="B0[4|8]_10m" \
   register_output=sentinel-timestamps.txt

Example of created timestamp file:

::

   T32UPB_20190407T102021_B04_10m|2019-04-07 10:26:45.035007|S2_4
   T32UPB_20190407T102021_B08_10m|2019-04-07 10:26:45.035007|S2_8
   T32UPB_20190422T102029_B04_10m|2019-04-22 10:26:50.312683|S2_4
   ...

..
   Otherwise follow cookbook below. Unfortunately there are no
   timestamps for imported maps required by
   :grasscmd:`t.register`. For this purpose a simple Python script has
   been designed.

   .. literalinclude:: ../_static/scripts/sentinel-timestamp.py
      :language: python
      :linenos:
      :emphasize-lines: 27, 30

   Timestamps can be easily determined from raster map name, for example
   *L2A_T32UPB_A021941_20190904T102045* raster map will be timestamped by
   *2019-09-04 10:20:45*, see line :lcode:`30`.

   Sample script to download: `sentinel-timestamp.py
   <../_static/scripts/sentinel-timestamp.py>`__

   By running this script a timestamp file will be produced.

   .. code-block:: bash

      sentinel-timestamp.py output=sentinel-timestamps.txt

Create space-time dataset
-------------------------
      
At this moment a new space-time dataset can be created by means of
:grasscmd:`t.create` and all imported Sentinel bands registered with
:grasscmd:`t.register`.

.. code-block:: bash

   t.create output=sentinel title="Sentinel L2A 2019" desc="Jena region"
   t.register input=sentinel file=sentinel-timestamps.txt

Let's check basic metadata (:grasscmd:`t.info`) and list the registered
maps (:grasscmd:`t.rast.list`).

.. code-block:: bash

   t.info input=sentinel

::

   ...
   | Start time:................. 2019-04-07 10:26:45.035007
   | End time:................... 2019-10-14 10:26:46.742599
   ...
   | Semantic labels:............ S2_4,S2_8
   | Number of registered maps:.. 14

.. code-block:: bash

   t.rast.list input=sentinel

::

   name|mapset|start_time|end_time
   T32UPB_20190407T102021_B04_10m|sentinel_ndvi|2019-04-07 10:26:45.035007|None
   T32UPB_20190407T102021_B08_10m|sentinel_ndvi|2019-04-07 10:26:45.035007|None
   T32UPB_20190417T102031_B04_10m|sentinel_ndvi|2019-04-17 10:26:46.415802|None
   ...

NDVI ST computation
-------------------

For NDVI computation 4th and 8th bands are required (:doc:`05`). Map
algebra for spatio-temporal data is performed by :grasscmd:`t.rast.algebra`
which requires bands separated into different
spatio-temporal datasets (see example in :doc:`22`). Such datasets can
be prepared by :grasscmd:`t.rast.extract`.

.. code-block:: bash

   t.rast.extract input=sentinel where="semantic_label = 'S2_4'" output=b4
   t.rast.extract input=sentinel where="semantic_label = 'S2_8'" output=b8

Let's check content of the new datasets by :grasscmd:`t.rast.list`
using semantic labels.

.. code-block:: bash

   t.rast.list input=b4
   t.rast.list input=b8

Set computational region by :grasscmd:`g.region` including mask for
area of interest by :grasscmd:`r.mask`.

.. code-block:: bash

   g.region vector=jena_boundary align=T32UPB_20190407T102021_B04_10m
   r.mask vector=jena_boundary

NDVI (see :doc:`05`) computation on spatio-temporal datasets can be
performed in parallel (:param:`nproc`).
          
.. code-block:: bash

   t.rast.algebra basename=ndvi expression="ndvi = float(b8 - b4) / ( b8 + b4 )" nprocs=3

.. tip:: GRASS 8 adds mechanism of semantic labels which makes
   computation much more straighforward using
   :grasscmd:`t.rast.mapcalc`. NDVI can be computed directly using
   :map:`sentinel` space-time dataset. No need for creating time
   series subsets as described above.

   .. code-block:: bash
                   
      t.rast.mapcalc inputs=sentinel.S2_8,sentinel.S2_4 output=ndvi basename=ndvi \
      expression="float(sentinel.S2_8 - sentinel.S2_4) / (sentinel.S2_8 + sentinel.S2_4)" \
      nprocs=3

When computation is finished *ndvi* color table can be set with
:grasscmd:`t.rast.colors`.

.. code-block:: bash

   t.rast.colors input=ndvi color=ndvi

.. figure:: ../images/units/21/simple-animation.gif
   :class: large
           
   Simple NDVI animation (no clouds mask applied) created by
   :grasscmd:`g.gui.animation`.

.. important:: Load data as multiple raster maps instead of space time
   dataset.

Cloud mask
^^^^^^^^^^

Let's apply the cloud masks on our NDVI space-time dataset. At first,
we will create a new space-time dataset containing computed raster
masks. A sample Python script has been designed for this purpose
below. In case the scene contains clouds (:lcode:`43`), a vector mask
is created (:lcode:`44`), which is then rasterized using
:grasscmd:`v.to.rast` (:lcode:`48`).
       
.. literalinclude:: ../_static/scripts/sentinel-cloud-mask.py
   :language: python
   :linenos:
   :emphasize-lines: 43, 44, 48

Sample script to download: `sentinel-cloud-mask.py
<../_static/scripts/sentinel-cloud-mask.py>`__
	     
.. code-block:: bash
		
   sentinel-cloud-mask.py map=jena_boundary input=b4 output=cloud-timestamps.txt

Now we can create a new space-time dataset and register the raster cloud masks
created before.

.. code-block:: bash

   t.create output=clouds title="Sentinel L2A 2019 (clouds)" desc="Jena region"
   t.register input=clouds file=cloud-timestamps.txt

Let's check maps registered in the new space-time dataset.

.. code-block:: bash

   t.rast.list input=clouds
   
We now apply the cloud masks map by map using :grasscmd:`t.rast.algebra` and set 
*ndvi* color table.

.. code-block:: bash

   t.rast.algebra basename=ndvi_masked \
   expression="ndvi_masked = if(isnull(clouds), null(), float(b8 - b4) / ( b8 + b4 ))" \
   nprocs=3

   t.rast.colors in=ndvi_masked color=ndvi

.. figure:: ../images/units/21/simple-animation-clouds.gif
   :class: large

   Simple NDVI animation with clouds masks applied. Computation is limited
   to AOI only.


   
