Unit 13 - PyGRASS Raster Access
===============================

PyGRASS allows directly accessing native GRASS raster and vector maps
in the sense of Python objects. This unit shows how to deal with GRASS
raster data by PyGRASS API, see :doc:`14` for vector data.

Raster data
-----------

Raster map can be treated by :pygrass-raster:`RasterRow` for reading
raster data row by row. There is also :pygrass-raster:`RasterSegment`
which allows reading data by user-defined segments (tiles).

.. literalinclude:: ../_static/scripts/ndvi-pygrass-univar.py
   :language: python
   :lines:  4-6

Raster map is open by ``open()`` method. Basic information like number
of columns and rows, min and max values, range printed.
   
.. code-block:: python

   ndvi.open()
   print (ndvi.info.cols, ndvi.info.rows)
   min, max = ndvi.info.range
   print (min, max)             
   print (max - min)
                
.. figure:: ../images/units/13/pygrass-shell.png

   Running PyGRASS code from Python tab of Layer Manager.

Don't forget to close the raster map at the end.

.. code-block:: python

   ndvi.close()

Raster statistics example
-------------------------

A simple PyGRASS script for computing basic univariate raster
statistics below.

.. literalinclude:: ../_static/scripts/ndvi-pygrass-univar.py
   :language: python

.. tip:: Compare computation speed of your simple script with C-based
   :grasscmd:`r.univar` module...

   .. figure:: ../images/units/13/r-univar.png

      PyGRASS script and :grasscmd:`r.univar` comparision.
             
Sample script to download: `ndvi-pygrass-univar.py
<../_static/scripts/ndvi-pygrass-univar.py>`__

Writing raster data
-------------------

It is possible to write raster map using PyGRASS, it is possible to start
from existing maps or from scratch. In the next example we are going to
create ndvi map from the existing Sentinel bands

.. code-block:: python

   import numpy

   b04 = RasterRow('L2A_T32UPB_20170706T102021_B04_10m')
   b04.open()
   b08 = RasterRow('L2A_T32UPB_20170706T102021_B08_10m')
   b08.open()
   ndvi = RasterRow('ndvi_pyrass')
   ndvi.open('w', mtype='FCELL', overwrite=True)
   
   for i in range(len(b04)):
       row_b04 = b04[i]
       row_b08 = b08[i]
       rowb04 = row_b04.astype(numpy.float32)
       rowb08 = row_b08.astype(numpy.float32)
       row_new = (rowb08 - rowb04) / (rowb08 + rowb04)
       ndvi.put_row(row_new)

   ndvi.close() 
   b04.close()
   b08.close()

.. tip::

   To create a raster from scratch you need to remember to get the right
   number of rows and columns and create an empty row (Buffer object in PyGRASS)
   
   .. code-block:: python
   
      newscratch = RasterRow('newscratch')
      newscratch.open('w', overwrite=True)
      
      # get computational region info
      from grass.pygrass.gis.region import Region
      reg = Region()
      
      # import buffer and create empty row
      from grass.pygrass.raster.buffer import Buffer
      newrow = Buffer((reg.cols,), mtype='CELL')
    
      # we create a raster to fill all the GRASS GIS region
      for r in range(reg.rows):
          newrow[:] = np.random.random_integers(0, 1000, size=newrow.size)
          newscratch.put_row(newrow)
    
      newscratch.close()
