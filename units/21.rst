Unit 21 - Sentinel ST
=====================

This unit is dedicated to downloading and processing time-series
Sentinel products.

Let's download Sentinel products (*Sentinel2 L2A* similary as in
:doc:`20`) for year 2019. There are 7 products available as shown
below, which quite enough for our purpose.

.. code-block:: bash
                
   i.sentinel.download -l settings=sentinel.txt map=jena_boundary area_relation=Contains \
   start=2019-04-01 end=2019-10-31 producttype=S2MSI2A clouds=10

::
   
   7 Sentinel product(s) found
   a0ae6f58-4890-4382-bbd8-571874bfc65e 2019-06-26T10:20:31Z  1% S2MSI2A
   caa11e7b-454d-4301-86b9-4c11659cc8a1 2019-04-17T10:20:31Z  3% S2MSI2A
   31ad53f4-146a-41a8-bce6-d9e99dfd7f66 2019-04-22T10:20:29Z  3% S2MSI2A
   e6ecc89f-0a06-498b-9e8d-354d1e8ead4e 2019-10-14T10:20:31Z  5% S2MSI2A
   3fe2df76-019d-4611-8ffb-560683ae4500 2019-08-25T10:20:31Z  6% S2MSI2A
   be91b224-0d6c-45d0-95a5-5cf5743a349e 2019-09-04T10:20:21Z  7% S2MSI2A
   60149bc8-5ab0-4a79-b964-24672739d5b9 2019-04-07T10:20:21Z  9% S2MSI2A

.. note:: For simplification you can find this data in sample dataset (`download
   7z-archive
   <http://geo102.fsv.cvut.cz/geoforall/grass-gis-workshop-jena-2018/jena-sample-data.7z>`__)
   in :file:`sentinel/2017` folder or as GRASS mapset as
   :file:`grassdata/st.tar.gz`. You can use this mapset (extract to
   *jena-utm* location) and go to :ref:`next part <sentinel-go-to>` if
   you like.

Now we can start downloading data.

.. code-block:: bash
                
   i.sentinel.download settings=sentinel.txt map=jena_boundary area_relation=Contains \
  start=2019-04-01 end=2019-10-31 producttype=S2MSI2A clouds=10 output=/home/user/geodata/sentinel/2019

When data are downloaded we can import them into our *jena-utm*
location. It is a good idea to import data into newly created mapset
(:grasscmd:`g.mapset`, see :ref:`Unit 16 <create-mapset>`). In command
below we force linking instead of importing data.

.. code-block:: bash

   g.mapset -c mapset=st
   i.sentinel.import -l -c input=/home/user/geodata/sentinel/2019 pattern="B0[4|8]_10m"

.. todo:: register_output=2019/register.txt

.. _sentinel-go-to:

In next step a new space time raster dataset will created and imported
maps registered. Unfortunately we don't have timestamps for imported
maps required by :grasscmd:`t.register` (as shown in :ref:`Unit 25
<t-register-file>`). For this purpose we will design a simple Python
script as shown below.

.. literalinclude:: ../_static/scripts/sentinel-timestamp.py
   :language: python
   :linenos:
   :emphasize-lines: 27, 30

Timestamps can be easily determined from raster map name, for example
*L2A_T32UPB_20170517T102031_B04_10m* raster map will be timestamped by
*2017-05-17 10:20:31*, see line :lcode:`30`.

.. note:: To avoid error in computation we also set up endtime
   timestamp as starttime+1sec, see :lcode:`27`.

   This workaround should be avoided. Determine how?

Sample script to download: `sentinel-timestamp.py
<../_static/scripts/sentinel-timestamp.py>`__

Now we can run our script to produce timestamp file.

.. code-block:: bash

   sentinel-timestamp.py output=sentinel.txt
   
At this moment we can create a new space time dataset
(:grasscmd:`t.create`) and register all imported Sentinel bands
(:grasscmd:`t.register`).

.. code-block:: bash

   t.create output=sentinel title="Sentinel L2A 2017" desc="Jena region"
   t.register input=sentinel file=sentinel.txt

Let's check basic metadata (:grasscmd:`t.info`) and list of registered
maps (:grasscmd:`t.rast.list`).

.. code-block:: bash

   t.info input=sentinel
   t.rast.list input=sentinel

NDVI ST computation
-------------------

For NDVI computation we will create new space time datasets for 4th
and 8th bands respectively (by :grasscmd:`t.rast.extract`).

.. code-block:: bash

   t.rast.extract input=sentinel where="name like '%B04%'" output=b4
   t.rast.extract input=sentinel where="name like '%B08%'" output=b8

Let's check content of the new datasets by :grasscmd:`t.rast.list`.

.. code-block:: bash

   t.rast.list input=b4
   t.rast.list input=b8

Before computation let's desired computation region by :grasscmd:`g.region`.

.. code-block:: bash

   g.region vector=jena_boundary align=L2A_T32UPB_20170517T102031_B04_10m

And perform NDVI computation based map algebra expression as described
in :doc:`05` in parallel (:param:`nproc`) by
:grasscmd:`t.rast.mapcalc`.

.. code-block:: bash

   t.rast.mapcalc input=b4,b8 output=ndvi \
   expression="ndvi = float(b8 - b4) / ( b8 + b4 )" \
   basename=ndvi nproc=3

When computation is finished we can set up *ndvi* color table in order
to create fancy animation as shown below.

.. code-block:: bash

   t.rast.colors input=ndvi color=ndvi

.. figure:: ../images/units/21/simple-animation.gif
   :class: middle

   Simple NDVI animation (no clouds mask applied) created by
   :grasscmd:`g.gui.animation`.

.. note:: Load maps as multiple raster maps instead of space time
          datasets. There is problem with sampling related to trick
          with endtime mentioned above.

The result is not perfect as we can see. We should apply at least
cloud mask before NDVI computation. This operation can be easily
solved by applying new space time dataset containing computed raster
masks. We will create a new Python script for this purpose. The script
will also produce timestamp file similarly to
:file:`sentinel-timestamp.py`. The mask can be created as we know from
:doc:`05` by :grasscmd:`r.mask`, see line :lcode:`39`. But in this
case we need to keep mask for further usage. We will use simple trick,
:grasscmd:`r.mask` produces normal raster map with unique name
*MASK*. It's enough to rename this map by :grasscmd:`g.rename`, see
line :lcode:`30`.

.. literalinclude:: ../_static/scripts/sentinel-clouds-mask.py
   :language: python
   :linenos:
   :emphasize-lines: 29, 30

Sample script to download: `sentinel-clouds-mask.py
<../_static/scripts/sentinel-clouds-mask.py>`__
	     
.. code-block:: bash
		
   sentinel-clouds-mask.py output=clouds.txt

Now we can create a new space time dataset with raster cloud masks
registered.

.. code-block:: bash

   t.create output=clouds title="Sentinel L2A 2017 (clouds)" desc="Jena region"
   t.register input=clouds file=clouds.txt

And apply modified expression for map algebra.

.. code-block:: bash

   t.rast.mapcalc input=b4,b8,clouds output=ndvi \
   expression="ndvi = if(isnull(clouds), null(), float(b8 - b4) / ( b8 + b4 ))" \
   basename=ndvi nproc=3 --overwrite

   t.rast.colors in=ndvi color=ndvi

The result is a little bit better, provided cloud mask are not perfect
as we already know.

.. figure:: ../images/units/21/simple-animation-clouds.gif
   :class: middle

   Simple NDVI animation with clouds mask applied.


   
