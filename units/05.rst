Unit 05 - Simple computation
============================

Computation of :wikipedia:`NDVI` is a well known "discipline" in
remote sensing. It is a simple task which requires basic knowledge of
*map algebra*. The key GRASS module related to map algebra is
:grasscmd:`r.mapcalc`.

To compute NDVI, the red (VIS) and near-infrared (NIR) channels are
required. In the case of Sentinel-2, it refers to 4th and 8th
band. The bands have been already imported into GRASS in :doc:`03`.

.. math::
        
   NDVI = (NIR - VIS) / (NIR  + VIS)

A GUI tool for map algebra can be launched from :menuselection:`Raster
--> Raster map calculator` or by |grass-raster-calculator|
:sup:`Raster map calculator` from a main toolbar.

.. important:: Be aware that :grasscmd:`r.mapcalc` as other raster
   processing modules are sensitive to computational region which
   **must to be set before any computation**, see :ref:`region` section
   for details.

.. figure:: ../images/units/05/mapcalc-gui.svg

   Compute NDVI using GUI raster map calculator by
   :item:`Expression`. The result is defined by :item:`Output`
   section.

Corresponding command for CLI (map names shorten):

.. code-block:: bash

   r.mapcalc expression="ndvi = float(B08_10m - B04_10m) / ( B08_10m + B04_10m )"

.. note:: Because all input raster maps are CELL type (integer) at
          least one sub-result must be converted to floating-point (here
          by ``float()`` function). Otherwise result would be also CELL map
          (integer: -1, 0, 1).

.. figure:: ../images/units/05/ndvi-mapcalc.png
   :class: middle
           
   NDVI computed by :grasscmd:`r.mapcalc` map algebra module (Jena
   city in red color).

Result is not perfect:

* default color table *viridis* is not suitable for NDVI values
* NDVI has been computed also in cloudy areas

The first issue can be easily fixed by :grasscmd:`r.colors`
(:menuselection:`Raster --> Manage colors --> Color tables`), see
:ref:`color-table` section. The second issue requires setting a mask
to ignore cloudy areas in computation. This operation can be done by
:grasscmd:`r.mask` module (:menuselection:`Raster --> Mask`).

A mask will defined base on cloud mask vector map in inverse
manner. Note that mask as other raster processing is created only
within the current computation region.

.. figure:: ../images/units/05/r-mask.png

   Creating mask from an input vector map.
   
.. code-block:: bash

   r.mask -i vector=MaskFeature

.. note:: Cloud mask provided by Sentinel products is not perfect, but
   it is a good starting point for us.

There is also specialized module for computing various vegetation
indices including NDVI - :grasscmd:`i.vi`. This module makes NDVI
computing even simpler.

Let's recompute :map:`ndvi` map using :grasscmd:`i.vi` (map names
shorten):

.. code-block:: bash

   i.vi red=B04_10m output=ndvi viname=ndvi nir=B08_10m

.. tip:: Also a simple legend can be added to map display by
   |grass-overlay-add| :sup:`Add map elements` (*Add raster legend*) from
   Map Display toolbar.

   .. figure:: ../images/units/05/ndvi-vi.png
      :class: middle
           
      Final NDVI result with cloud mask and simple legend.

