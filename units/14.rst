Unit 14 - PyGRASS scripting
===========================

PyGRASS also allows calling existing GRASS module similarly as GRASS
Scripting Library does (see :doc:`11` and :doc:`12`). The module
caller is represented by :pygrass-modules:`Module` class. In contrast
to GRASS Scripting Library which defines several routines to run
module (:grass-script:`core.run_command`,
:grass-script:`core.read_command`, or
:grass-script:`core.feed_command`) in PyGRASS there is only one caller
technique.

We can rewrite our simple script created in :doc:`12` using PyGRASS.

We start replacing all :grass-script:`core.run_command` by
:pygrass-modules:`Module` caller, see example below.

.. code-block:: python

   from grass.script import run_command

   run_command("v.overlay",
		overwrite = True,
                ainput = options["region"],
                binput = options["clouds"],
                operator = "not",
                output = region_mask)

by

.. code-block:: python

   from grass.pygrass.modules import Module

   Module("v.overlay",
          overwrite = True,
          ainput = options["region"],
          binput = options["clouds"],
          operator = "not",
          output = region_mask)

Then let's replace :grass-script:`core.feed_command`. In this case
PyGRASS leads to more compact syntax, see below.

.. code-block:: python

    p1 = feed_command("r.recode",
                      overwrite = True,
                      input = "ndvi",
                      output = "ndvi_class",
                      rules = "-")
    p1.stdin.write("""-1:0.1:1
 0.1:0.5:2
 0.5:1:3""")
    p1.stdin.close()
    p1.wait()

In PyGRASS syntax replaced also by :pygrass-modules:`Module` class.

.. code-block:: python

    recode_str="""-1:0.1:1
 0.1:0.5:2
 0.5:1:3"""

    Module("r.recode",
           overwrite = True,
           input = "ndvi",
           output = "ndvi_class",
           rules = "-",
           stdin_ = recode_str)   

In similar way also :grass-script:`core.read_command` can be replaced
by :pygrass-modules:`Module` class, see a code block below.

.. code-block:: python

   ret = read_command('v.report', map=options["output"], option='area')
   for line in ret.splitlines()[1:]:
       ...

Changed to

.. code-block:: python
		
   ret = Module('v.report', map=options["output"], option='area',
                stdout_=PIPE)
   for line in ret.outputs.stdout.splitlines()[1:]:
       ...

.. note:: In PyGRASS, multiple options need to turned into a list. See
   example below for :grasscmd:`v.rast.stats` and :param:`method`
   option.

   .. code-block:: python

      Module('v.rast.stats', flags='c', map=options["output"], raster='ndvi',
      column_prefix='ndvi', method='minimum,maximum,average')

   Changed to 
   
   .. code-block:: python

      Module('v.rast.stats', flags='c', map=options["output"], raster='ndvi',
      column_prefix='ndvi', method=['minimum','maximum','average'])
   
Sample script to download: `ndvi-v4.py <../_static/scripts/ndvi-v4.py>`__

For GRASS scripting the user can choose between two different GRASS
Python libraries, or approaches if you want. Either GRASS Scripting
Library based on procedural programming techniques or PyGRASS as an
objected-oriented approach. It's your choice. We, in the next units,
will focus mainly on PyGRASS.
