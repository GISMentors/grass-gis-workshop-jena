Unit 14 - PyGRASS Vector Access
===============================

PyGRASS allows directly accessing native GRASS raster and vector maps
in the sense of Python objects. This unit shows how to deal with GRASS
topological vector data by PyGRASS API, see :doc:`13` for raster data.

Let's import :file:`geodata/osm/counties.gpkg` into *jena-region*
GRASS location.

Vector data
-----------

Vector map can be treated by :pygrass-vector:`Vector` when dealing
with basic vector primitives (points, lines, boundaries, centroids) or
by :pygrass-vector:`VectorTopo` which allows accessing topological
primitives like areas or isles. See :ref:`vector-topo-section` section
for details.

Example below prints county names and their area size in hectares.

.. code-block:: python
                
   from grass.pygrass.vector import VectorTopo
   counties = VectorTopo('counties')
   counties.open('r')
   
   for feat in counties.viter('areas'):
       if not feat.attrs:
           continue
       print (u'{0}: {1:.1f}ha'.format(feat.attrs['name'], feat.area() / 10e4))
   
   counties.close()

..
   .. figure:: ../images/units/14/pygrass-shell-vector.png
   PyGRASS vector example in action.

Writing vector data
--------------------

In the example below a point vector data with an attribute table will
be created.

.. literalinclude:: ../_static/scripts/pygrass-write-vector.py
   :language: python
   :lines: 3-18

Sample script to download: `pygrass-write-vector.py
<../_static/scripts/pygrass-write-vector.py>`__

Topology access example
-----------------------

In the following example is presented how to access vector topological
primitives directly using PyGRASS. It requires full understanding of
GRASS topological model, see :ref:`vector-topo-section` section in
:doc:`03`.

Sample script below prints for each county number of its neighbours.

#. Vector map :map:`Counties` is open on line :lcode:`3` by
   :pygrass-vector:`VectorTopo` and its method ``open()``.
#. Features (areas in this case) are sequentially read by ``for`` loop
   on line :lcode:`6`. Areas are interated by ``viter()`` function.
#. For each feature (ie. county) its boudaries are looped, see line
   :lcode:`8`. Each boundary has two neighbours (line :lcode:`9`): on
   the left and right side (``-1`` for no area).

.. literalinclude:: ../_static/scripts/neighbours.py
   :language: python
   :lines: 3-17
   :linenos:
   :emphasize-lines: 3-4, 6, 8, 9

Sample script to download: `neighbours.py
<../_static/scripts/neighbours.py>`__
                     
Possible output:

::

   Baden-WÃ¼rttemberg        : 4
   Bayern                   : 6
   Saarland                 : 2
