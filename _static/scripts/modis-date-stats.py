#!/usr/bin/env python3
#
##############################################################################
#
# MODULE:       modis-date-stats
#
# AUTHOR(S):    martin
#
# PURPOSE:      Script generated by wxGUI Graphical Modeler.
#
# DATE:         Fri Feb  2 18:04:47 2024
#
##############################################################################

# %module
# % description: Computes LST stats for given period (limited to Germany and 2023).
# %end
# %option 
# % key: start
# % description: Start date (eg. 2023-03-01)
# % type: string
# % required: yes
# %end
# %option 
# % key: end
# % description: End date (eg. 2023-04-01)
# % type: string
# % required: yes
# %end

import sys
import os
import atexit
from subprocess import PIPE
from datetime import datetime

from grass.script import parser, fatal, parse_key_val
from grass.pygrass.modules import Module

def cleanup():
    Module("g.remove", flags="f", type="raster",
           name="t_rast_series_out")

def check_date(date_str):
    d = datetime.strptime(date_str, '%Y-%m-%d')
    if d.year != 2023:
        fatal("Only year 2023 allowed")

def main(options, flags):
    check_date(options['start'])
    check_date(options['end'])

    Module("t.rast.series",
           overwrite=True,
           input="modis_c",
           method="average",
           order="start_time",
           nprocs=3,
           memory=300,
           where="start_time > '{}' and start_time < '{}'".format(
                 options["start"], options["end"]),
           output="t_rast_series_out",
           file_limit=1000)

    m = Module("r.univar",
               flags='g',
               overwrite=True,
               map="t_rast_series_out",
               percentile=90,
               nprocs=1,
               separator="pipe",
               stdout_=PIPE)

    stats = parse_key_val(m.outputs.stdout, val_type=float)
    print('Min: {0:.1f}'.format(stats['min']))
    print('Max: {0:.1f}'.format(stats['max']))
    print('Mean: {0:.1f}'.format(stats['mean']))

    return 0

if __name__ == "__main__":
    options, flags = parser()
    atexit.register(cleanup)
    os.environ["GRASS_OVERWRITE"] = "1"
    sys.exit(main(options, flags))
